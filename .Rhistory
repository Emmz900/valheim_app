# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values")
weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values") %>%
mutate(across(where(is.character), str_to_title)) %>%
distinct()
weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values") %>%
mutate(across(where(is.character), str_to_title)) %>%
distinct() %>%
# Add min_max column and simplify damage type column
mutate(min_max = #
case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
),
damage_type = str_remove(damage_type, "_min|_max|_diff")
)
weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values") %>%
mutate(across(where(is.character), str_to_title)) %>%
distinct() %>%
# Add min_max column and simplify damage type column
mutate(min_max = #
case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
)
)
weapons_crafting_clean %>%
filter(item == "tankard") %>%
filter(upgrade_level == 1) %>%
select(material, amount_of_material) %>%
rename("Material" = material, "Amount of Material" = amount_of_material)
weapons_crafting_clean %>%
filter(item == "Finewood Bow") %>%
filter(upgrade_level == 1) %>%
select(material, amount_of_material) %>%
rename("Material" = material, "Amount of Material" = amount_of_material)
weapons_crafting_clean %>%
filter(item == "Silver Sword") %>%
filter(upgrade_level == 1) %>%
select(material, amount_of_material) %>%
rename("Material" = material, "Amount of Material" = amount_of_material)
weapons_crafting_clean %>%
filter(item == "Silver Sword") %>%
filter(upgrade_level == 1) %>%
distinct(crafting_station) %>%
pull() %>%
str_to_title()
weapons_crafting_clean %>%
filter(item == "Silver Sword") %>%
filter(upgrade_level == 1) %>%
distinct(crafting_station_level) %>%
pull()
weapons_data_clean %>%
filter(name == "Silver Sword") %>%
mutate(min_max = case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
),
damage_type = str_remove(damage_type, "_min|_max|_diff")
) %>%
mutate(min_max = coalesce(min_max, "min")) %>%
filter(min_max != "max") %>%
ggplot(aes(damage_type, values, fill = min_max)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values = c(
"diff" = "green4",
"min" = "green3"
)) +
theme_classic()+
labs(
x = "Damage Type",
y = "Damage Values"
) +
theme(
axis.title = element_text(size = 12)
)
weapons_data_clean %>%
filter(name == "fire arrow") %>%
mutate(min_max =
case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
),
damage_type = str_remove(damage_type, "_min|_max|_diff")
) %>%
mutate(min_max = coalesce(min_max, "min")) %>%
filter(min_max != "max") %>%
ggplot(aes(damage_type, values, fill = min_max)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values = c(
"diff" = "green4",
"min" = "green3"
)) +
theme_classic() +
labs(
x = "Damage Type",
y = "Damage Values"
) +
theme(axis.title = element_text(size = 12))
weapons_data_clean %>%
filter(name == "Silver Sword",
min_max != "max")
weapons_data_clean %>%
filter(name == "Silver Sword",
min_max != "max") %>%
ggplot(aes(damage_type, values, fill = min_max)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values = c(
"diff" = "green4",
"min" = "green3"
)) +
theme_classic()+
labs(
x = "Damage Type",
y = "Damage Values"
) +
theme(
axis.title = element_text(size = 12)
)
runApp('shiny_app_scripts')
weapons_data_clean
weapons_data_small <- weapons_data_clean %>%
select(name, damage_type, values, min_max) %>%
distinct()
weapons_joined <-
full_join(weapons_crafting_small,
weapons_data_small,
by = join_by(item == name),
relationship = "many-to-many") %>%
filter(!type %in% c("Upgrade", "Tool", "Shield", "Magic", "Weapon"))
weapons_joined
weapon_type_list <- weapons_joined %>%
filter(!type %in% c("upgrade", "tool", "shield", "magic", "weapon")) %>%
mutate(type = str_to_title(type)) %>%
distinct(type) %>%
pull() %>%
append("All")
weapons_joined %>%
filter(material == "wood")
weapon_type_list
weapon_data_split <- weapon_data %>%
janitor::clean_names() %>%
select(-dps, -stamina) %>%
mutate(
type = str_to_title(str_remove(type, "s$")), # remove plurals
damage_type = str_to_title(str_extract(damage, "[A-Z][a-z]+")), # Extract damage type from damage column
damage = str_extract(damage, "[\\.0-9/]+"), # Extract damage values
backstab = as.numeric(str_remove(backstab, "x")), # Remove x from backstab and convert to numeric
) %>%
mutate(
# Rename total damage column
max_total_damage = max_damage,
min_damage = as.numeric(str_extract(damage, "[0-9]+")),
max_damage = as.numeric(str_extract(damage, "[0-9\\.]+$")),
# rename damage and dps types
damage_type_max = paste0(damage_type, "_max"),
damage_type_min = paste0(damage_type, "_min"),
damage_type_diff = paste0(damage_type, "_diff"),
backstab_x10 = backstab * 10, #increase backstab for readability on plot
type = case_when( # correct knives to knife
type == "Knive" ~ "Knife",
type == "2 Handed Club" ~ "Club",
.default = type
)
) %>%
# add columns for the difference between min and max
mutate(
diff_damage = max_damage - min_damage
) %>%
select(-damage, -total_damage, -damage_type, -backstab)
weapon_data_long <- weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values") %>%
mutate(across(where(is.character), str_to_title)) %>%
distinct() %>%
# Add min_max column and simplify damage type column
mutate(min_max = #
case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
),
damage_type = str_remove(damage_type, "_min|_max|_diff")
) %>%
mutate(min_max = coalesce(min_max, "min"))
write_csv(weapon_data_long, "clean_data/weapon_data.csv")
runApp('shiny_app_scripts')
weapons_joined
runApp('shiny_app_scripts')
weapon_data_split <- weapon_data %>%
janitor::clean_names() %>%
select(-dps, -stamina) %>%
mutate(
type = str_to_title(str_remove(type, "s$")), # remove plurals
damage_type = str_to_title(str_extract(damage, "[A-Z][a-z]+")), # Extract damage type from damage column
damage = str_extract(damage, "[\\.0-9/]+"), # Extract damage values
backstab = as.numeric(str_remove(backstab, "x")), # Remove x from backstab and convert to numeric
) %>%
mutate(
# Rename total damage column
TOTAL = max_damage,
min_damage = as.numeric(str_extract(damage, "[0-9]+")),
max_damage = as.numeric(str_extract(damage, "[0-9\\.]+$")),
# rename damage and dps types
damage_type_max = paste0(damage_type, "_max"),
damage_type_min = paste0(damage_type, "_min"),
damage_type_diff = paste0(damage_type, "_diff"),
backstab_x10 = backstab * 10, #increase backstab for readability on plot
type = case_when( # correct knives to knife
type == "Knive" ~ "Knife",
type == "2 Handed Club" ~ "Club",
.default = type
)
) %>%
# add columns for the difference between min and max
mutate(
diff_damage = max_damage - min_damage
) %>%
select(-damage, -total_damage, -damage_type, -backstab)
weapon_data_long <- weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values") %>%
mutate(across(where(is.character), str_to_title)) %>%
distinct() %>%
# Add min_max column and simplify damage type column
mutate(min_max = #
case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
),
damage_type = str_remove(damage_type, "_min|_max|_diff")
) %>%
mutate(min_max = coalesce(min_max, "min"))
write_csv(weapon_data_long, "clean_data/weapon_data.csv")
weapon_data_long
weapon_data_split
weapon_data_split <- weapon_data %>%
janitor::clean_names() %>%
select(-dps, -stamina) %>%
mutate(
type = str_to_title(str_remove(type, "s$")), # remove plurals
damage_type = str_to_title(str_extract(damage, "[A-Z][a-z]+")), # Extract damage type from damage column
damage = str_extract(damage, "[\\.0-9/]+"), # Extract damage values
backstab = as.numeric(str_remove(backstab, "x")), # Remove x from backstab and convert to numeric
) %>%
mutate(
# Rename total damage column
TOTAL = max_damage,
min_damage = as.numeric(str_extract(damage, "[0-9]+")),
max_damage = as.numeric(str_extract(damage, "[0-9\\.]+$")),
# rename damage and dps types
damage_type_max = paste0(damage_type, "_max"),
damage_type_min = paste0(damage_type, "_min"),
damage_type_diff = paste0(damage_type, "_diff"),
backstab_x10 = backstab * 10, #increase backstab for readability on plot
type = case_when(
type == "Knive" ~ "Knife",
type == "2 Handed Club" ~ "Club",
type == "Two-Handed Axe" ~ "Axe",
.default = type
)
) %>%
# add columns for the difference between min and max
mutate(
diff_damage = max_damage - min_damage
) %>%
select(-damage, -total_damage, -damage_type, -backstab)
weapon_data_long <- weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values") %>%
mutate(across(where(is.character), str_to_title)) %>%
distinct() %>%
# Add min_max column and simplify damage type column
mutate(min_max = #
case_when(
str_detect(damage_type, "_min") ~ "min",
str_detect(damage_type, "_max") ~ "max",
str_detect(damage_type, "_diff") ~ "diff"
),
damage_type = str_remove(damage_type, "_min|_max|_diff")
) %>%
mutate(min_max = coalesce(min_max, "min"))
write_csv(weapon_data_long, "clean_data/weapon_data.csv")
weapon_data_split
weapon_data_split <- weapon_data %>%
janitor::clean_names() %>%
select(-dps, -stamina) %>%
mutate(
type = str_to_title(str_remove(type, "s$")), # remove plurals
damage_type = str_to_title(str_extract(damage, "[A-Z][a-z]+")), # Extract damage type from damage column
damage = str_extract(damage, "[\\.0-9/]+"), # Extract damage values
backstab = as.numeric(str_remove(backstab, "x")), # Remove x from backstab and convert to numeric
) %>%
mutate(
# Rename total damage column
TOTAL = max_damage,
min_damage = as.numeric(str_extract(damage, "[0-9]+")),
max_damage = as.numeric(str_extract(damage, "[0-9\\.]+$")),
# rename damage and dps types
damage_type_max = paste0(damage_type, "_max"),
damage_type_min = paste0(damage_type, "_min"),
damage_type_diff = paste0(damage_type, "_diff"),
backstab_x10 = backstab * 10, #increase backstab for readability on plot
type = case_when(
type == "Knive" ~ "Knife",
type == "2 Handed Club" ~ "Club",
type == "Two-Handed Axe" ~ "Axe",
.default = type
)
) %>%
# add columns for the difference between min and max
mutate(
diff_damage = max_damage - min_damage
) %>%
select(-damage, -total_damage, -damage_type, -backstab)
weapon_data_split
weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage) %>%
pivot_longer(-c(name,type), names_to = "damage_type", values_to = "values")
weapon_data_long
weapon_data_split %>%
# make damage type columns before pivoting all damage indicators into two columns
pivot_wider(names_from = damage_type_max, values_from = max_damage) %>%
pivot_wider(names_from = damage_type_min, values_from = min_damage) %>%
pivot_wider(names_from = damage_type_diff, values_from = diff_damage)
weapon_data_split
source("~/Games/Valheim/valheim_app/cleaning_and_test_scripts/cleaning_crafting.R", echo=TRUE)
library(tidyverse)
library(here)
weapons_crafting_clean <- read_csv(here("clean_data/weapons_crafting.csv"))
weapons_data_clean <- read_csv(here("clean_data/weapon_data.csv"))
weapon_data_long
weapon_data_long %>%
filter(damage_type == "Na")
source("~/Games/Valheim/valheim_app/cleaning_and_test_scripts/cleaning_crafting.R", echo=TRUE)
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
food_ingredients <- read_csv("raw_data/food_ingredients.csv")
library(tidyverse)
library(bslib)
library(plotly)
library(here)
food_ingredients <- read_csv("raw_data/food_ingredients.csv")
food_stats <- read_csv("raw_data/food_stats.csv")
food_ingredients
food_stats
food_ingredients <- read_csv("raw_data/food_ingredients.csv")
food_stats <- read_csv("raw_data/food_stats.csv") %>%
mutate(zone = factor(zone, levels = "meadows", "black forest", "swamp", "ocean", "mountain", "plains", "mistlands"))
unique(food_stats$zone)
food_stats <- read_csv("raw_data/food_stats.csv") %>%
mutate(zone = factor(zone, levels = "meadows", "black forest", "swamp", "ocean", "mountains", "plains", "mistlands"))
unique(food_stats$zone)
food_stats <- read_csv("raw_data/food_stats.csv") %>%
mutate(zone = factor(zone, levels = c("meadows", "black forest", "swamp", "ocean", "mountains", "plains", "mistlands")))
ingredients_list <- sort(unique(food_ingredients$ingredients))
biome_list <- unique(food_stats$zone)
shiny::runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
food_stats
library(tidyverse)
food_stats %>%
pivot_longer(health:duration, names_to = "stat", values_to = "values")
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
library(tidyverse)
library(here)
food_ingredients <- read_csv(here("raw_data/food_ingredients.csv"))
food_stats <- read_csv(here("raw_data/food_stats.csv")) %>%
mutate(zone = factor(zone, levels = c("meadows", "black forest", "swamp", "ocean", "mountains", "plains", "mistlands"))) %>%
pivot_longer(health:duration, names_to = "stat", values_to = "values")
ingredients_list <- sort(unique(food_ingredients$ingredients))
biome_list <- unique(food_stats$zone)
food_stats %>%
ggplot(aes(recipe, values, fill = stat)) +
geom_col(position = "dodge")
food_stats %>%
filter(type == "Health") %>%
ggplot(aes(recipe, values, fill = stat)) +
geom_col(position = "dodge")
food_stats %>%
filter(type == "Health" & !is.na(values)) %>%
ggplot(aes(recipe, values, fill = stat)) +
geom_col(position = "dodge")
food_stats %>%
filter(type == "Health" & !is.na(values)) %>%
arrange(score) %>%
ggplot(aes(recipe, values, fill = stat)) +
geom_col(position = "dodge")
```{r}
food_stats %>%
filter(type == "Health" & !is.na(values)) %>%
arrange(score)
food_stats %>%
filter(type == "Health" & !is.na(values)) %>%
ggplot(aes(reorder(recipe, score), values, fill = stat)) +
geom_col(position = "dodge")
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
food_stats
unique(food_stats$type)
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
food_stats
runApp('shiny_app_scripts')
food_stats %>% filter(!is.na(values))
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
food_stats
food_stats
food_ingredients
food_stats %>%
full_join(food_ingredients, by = recipe)
food_stats %>%
full_join(food_ingredients, by = "recipe")
library(tidyverse)
library(here)
food_ingredients <- read_csv(here("raw_data/food_ingredients.csv"))
food_stats <- read_csv(here("raw_data/food_stats.csv")) %>%
mutate(zone = factor(zone, levels = c("meadows", "black forest", "swamp", "ocean", "mountains", "plains", "mistlands"))) %>%
pivot_longer(health:duration, names_to = "stat", values_to = "values")
ingredients_list <- sort(unique(food_ingredients$ingredients))
biome_list <- unique(food_stats$zone)
food_stats %>%
full_join(food_ingredients, by = "recipe")
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
?cat
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
runApp('shiny_app_scripts')
